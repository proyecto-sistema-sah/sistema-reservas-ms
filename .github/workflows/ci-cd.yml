name: Build and Deploy with AWS CLI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'adopt'
          cache: maven

      # 3. Configure Maven settings
      - name: Set up Maven settings
        run: |
          mkdir -p ~/.m2
          echo "<settings><servers>
            <server><id>github-commons</id><username>${{ secrets.USERNAME }}</username><password>${{ secrets.TOKEN }}</password></server>
            <server><id>github-seguridad</id><username>${{ secrets.USERNAME }}</username><password>${{ secrets.TOKEN }}</password></server>
          </servers></settings>" > ~/.m2/settings.xml

      # 4. Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-



      # 6. Configure AWS CLI
      - name: Configure AWS CLI
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region = ${{ secrets.AWS_REGION }}" >> ~/.aws/config

      # 7. Verify AWS CLI Configuration
      - name: Verify AWS CLI
        run: |
          aws configure list
          aws s3 ls # Example: List S3 buckets to validate credentials

      # 4. Set Environment Variables Globally
      - name: Export AWS Environment Variables
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

      # 5. Compile and Test Project with Maven
      - name: Compile and Test Project
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: mvn clean package
          
      - name: Compile project
        run: mvn clean package

      # 8. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 9. Build Docker image
      - name: Build Docker image
        run: docker build -t mariafernanda2798/reservas:latest .

      # 10. Push Docker image
      - name: Push Docker image
        run: docker push mariafernanda2798/reservas:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 1. Log in to Azure
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 2. Deploy to Azure Web App for Containers
      - name: Deploy to Azure Web App for Containers
        uses: azure/webapps-deploy@v2
        with:
          app-name: "sistema-sah-reservas-ms"
          images: "mariafernanda2798/reservas:latest"